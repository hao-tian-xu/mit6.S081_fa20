diff --git a/Makefile b/Makefile
index 1fa367e..786e848 100644
--- a/Makefile
+++ b/Makefile
@@ -252,7 +252,9 @@ clean:
 	$U/initcode $U/initcode.out $K/kernel fs.img \
 	mkfs/mkfs .gdbinit \
         $U/usys.S \
-	$(UPROGS)
+	$(UPROGS) \
+	*/*[2-9]* \
+	.*[2-9] *[2-9]*
 
 # try to generate a unique GDB port
 GDBPORT = $(shell expr `id -u` % 5000 + 25000)
diff --git a/answers-pgtbl.txt b/answers-pgtbl.txt
new file mode 100644
index 0000000..5db3b0c
--- /dev/null
+++ b/answers-pgtbl.txt
@@ -0,0 +1 @@
+biuqiupiachia
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index a73b4f7..57009c8 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -179,6 +179,18 @@ int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
 
+void            vmprint(pagetable_t);                                       // Added by Haotian Xu on 11/4/21.
+void            proc_kvmmap(pagetable_t, uint64, uint64, uint64, int);      // Added by Haotian Xu on 11/5/21.
+pagetable_t     proc_kvminit(void);                                         // Added by Haotian Xu on 11/5/21.
+pagetable_t     get_kernel_pagetable(void);                                 // Added by Haotian Xu on 11/5/21.
+void            proc_kernel_pagetable_freewalk(pagetable_t);                // Added by Haotian Xu on 11/5/21.
+int             proc_uvm2kvm(pagetable_t, pagetable_t, uint64, uint64);     // Added by Haotian Xu on 11/5/21.
+
+// Added by Haotian Xu on 11/5/21.
+// vmcopyin.c
+int             copyin_new(pagetable_t, char*, uint64, uint64);
+int             copyinstr_new(pagetable_t, char*, uint64, uint64);
+
 // plic.c
 void            plicinit(void);
 void            plicinithart(void);
@@ -222,4 +234,4 @@ void            sockclose(struct sock *);
 int             sockread(struct sock *, uint64, int);
 int             sockwrite(struct sock *, uint64, int);
 void            sockrecvudp(struct mbuf*, uint32, uint16, uint16);
-#endif
+#endif
\ No newline at end of file
diff --git a/kernel/exec.c b/kernel/exec.c
index 0e8762f..02adcde 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -112,10 +112,18 @@ exec(char *path, char **argv)
   oldpagetable = p->pagetable;
   p->pagetable = pagetable;
   p->sz = sz;
+
+  // Added by Haotian Xu on 11/5/21.
+  // copy process' user page table to process' kernel page table
+  if(proc_uvm2kvm(p->pagetable, p->kernel_pagetable, 0, p->sz) < 0)
+    goto bad;
+
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
+  if(p->pid==1) vmprint(p->pagetable);
+
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
diff --git a/kernel/proc.c b/kernel/proc.c
index dab1e1d..0e970e3 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -29,17 +29,18 @@ procinit(void)
   
   initlock(&pid_lock, "nextpid");
   for(p = proc; p < &proc[NPROC]; p++) {
-      initlock(&p->lock, "proc");
-
-      // Allocate a page for the process's kernel stack.
-      // Map it high in memory, followed by an invalid
-      // guard page.
-      char *pa = kalloc();
-      if(pa == 0)
-        panic("kalloc");
-      uint64 va = KSTACK((int) (p - proc));
-      kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
-      p->kstack = va;
+    initlock(&p->lock, "proc");
+
+    // memo: functionality is said to be moved to allocproc, but kvmpa would have a panic
+    // Allocate a page for the process's kernel stack.
+    // Map it high in memory, followed by an invalid
+    // guard page.
+    char *pa = kalloc();
+    if(pa == 0)
+      panic("kalloc");
+    uint64 va = KSTACK((int) (p - proc));
+    kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
+    p->kstack = va;
   }
   kvminithart();
 }
@@ -121,6 +122,16 @@ found:
     return 0;
   }
 
+  // Added by Haotian Xu on 11/4/21.
+  // A process kernel page table.
+  p->kernel_pagetable = proc_kvminit();
+
+  // Added by Haotian Xu on 11/4/21.
+  // Add current process's kernel stack to its kernel page table
+  uint64 va = KSTACK((int) (p - proc));
+  uint64 pa = kvmpa(va);
+  proc_kvmmap(p->kernel_pagetable, va, pa, PGSIZE, PTE_R | PTE_W);
+
   // Set up new context to start executing at forkret,
   // which returns to user space.
   memset(&p->context, 0, sizeof(p->context));
@@ -150,6 +161,12 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+
+  // Added by Haotian Xu on 11/5/21.
+  // free proc_kernel_pagetable
+  if(p->kernel_pagetable)
+    proc_kernel_pagetable_freewalk(p->kernel_pagetable);
+  p->kernel_pagetable = 0;
 }
 
 // Create a user page table for a given process,
@@ -221,6 +238,12 @@ userinit(void)
   uvminit(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
 
+  // Added by Haotian Xu on 11/5/21.
+  // copy process' user page table to process' kernel page table
+  if(proc_uvm2kvm(p->pagetable, p->kernel_pagetable, 0, p->sz) < 0){
+    panic("userinit");
+  }
+
   // prepare for the very first "return" from kernel to user.
   p->trapframe->epc = 0;      // user program counter
   p->trapframe->sp = PGSIZE;  // user stack pointer
@@ -238,17 +261,24 @@ userinit(void)
 int
 growproc(int n)
 {
-  uint sz;
+  uint sz, newsz;
   struct proc *p = myproc();
 
   sz = p->sz;
+
   if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
+    if((newsz = uvmalloc(p->pagetable, sz, sz + n)) == 0
+    || proc_uvm2kvm(p->pagetable, p->kernel_pagetable, sz, sz + n) < 0      // Added by Haotian Xu on 11/5/21.
+    ){
       return -1;
     }
+    sz = newsz;
   } else if(n < 0){
-    sz = uvmdealloc(p->pagetable, sz, sz + n);
+    newsz = uvmdealloc(p->pagetable, sz, sz + n);
+//    uvmdealloc(p->kernel_pagetable, sz, sz + n);                          // Added by Haotian Xu on 11/5/21.
+    sz = newsz;
   }
+
   p->sz = sz;
   return 0;
 }
@@ -289,6 +319,14 @@ fork(void)
       np->ofile[i] = filedup(p->ofile[i]);
   np->cwd = idup(p->cwd);
 
+  // Added by Haotian Xu on 11/5/21.
+  // copy process' user page table to process' kernel page table
+  if(proc_uvm2kvm(np->pagetable, np->kernel_pagetable, 0, np->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+
   safestrcpy(np->name, p->name, sizeof(p->name));
 
   pid = np->pid;
@@ -460,6 +498,12 @@ scheduler(void)
   struct cpu *c = mycpu();
   
   c->proc = 0;
+
+  // Added by Haotian Xu on 11/5/21.
+  // set satp to kernel_pagetable
+  w_satp(MAKE_SATP(get_kernel_pagetable()));
+  sfence_vma();
+
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
@@ -473,12 +517,23 @@ scheduler(void)
         // before jumping back to us.
         p->state = RUNNING;
         c->proc = p;
+
+        // Added by Haotian Xu on 11/5/21.
+        // set satp to proc_kernel_pagetable
+        w_satp(MAKE_SATP(p->kernel_pagetable));
+        sfence_vma();
+
         swtch(&c->context, &p->context);
 
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
 
+        // Added by Haotian Xu on 11/5/21.
+        // set satp to kernel_pagetable
+        w_satp(MAKE_SATP(get_kernel_pagetable()));
+        sfence_vma();
+
         found = 1;
       }
       release(&p->lock);
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..2ba4788 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -103,4 +103,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  pagetable_t kernel_pagetable;     // Added by Haotian Xu on 11/4/21.
 };
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..8c0cde7 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -379,6 +379,9 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 int
 copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 {
+  return copyin_new(pagetable, dst, srcva, len);
+
+  // memo: replaced by copyin_new()
   uint64 n, va0, pa0;
 
   while(len > 0){
@@ -405,6 +408,9 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 int
 copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
 {
+  return copyinstr_new(pagetable, dst, srcva, max);
+
+  // memo: replaced by copyinstr_new()
   uint64 n, va0, pa0;
   int got_null = 0;
 
@@ -440,3 +446,151 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+// Created by Haotian Xu on 11/4/21.
+static void _vmprint(pagetable_t, int);
+
+// Created by Haotian Xu on 11/4/21.
+void
+vmprint(pagetable_t pagetable)
+{
+  printf("page table %p\n", pagetable);
+  _vmprint(pagetable, 0);
+}
+
+// Created by Haotian Xu on 11/4/21.
+static char* level2prefix[3] = {
+    [0] = "..",
+    [1] = ".. ..",
+    [2] = ".. .. ..",
+};
+
+// Created by Haotian Xu on 11/4/21.
+static void
+_vmprint(pagetable_t pagetable, int level)
+{
+  for(int i = 0; i < 512; i++){
+    pte_t pte = pagetable[i];
+    if (pte & PTE_V) {
+      uint64 pa = PTE2PA(pte);
+      printf("%s%d: pte %p pa %p\n", level2prefix[level], i, pte, pa);
+      if (level < 2) _vmprint((pagetable_t)pa, level+1);
+    }
+  }
+}
+
+// Created by Haotian Xu on 11/5/21.
+// add a mapping to the process' kernel page table.
+void
+proc_kvmmap(pagetable_t proc_kernel_pagetable, uint64 va, uint64 pa, uint64 sz, int perm)
+{
+  if(mappages(proc_kernel_pagetable, va, sz, pa, perm) != 0)
+    panic("kvmmap");
+}
+
+// Created by Haotian Xu on 11/5/21.
+// per process kernel page table, see kvminit() for detail
+pagetable_t
+proc_kvminit()
+{
+  pagetable_t proc_kernel_pagetable = (pagetable_t) kalloc();
+  memset(proc_kernel_pagetable, 0, PGSIZE);
+
+  proc_kvmmap(proc_kernel_pagetable, UART0, UART0, PGSIZE, PTE_R | PTE_W);
+  proc_kvmmap(proc_kernel_pagetable, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
+  proc_kvmmap(proc_kernel_pagetable, CLINT, CLINT, 0x10000, PTE_R | PTE_W);
+  proc_kvmmap(proc_kernel_pagetable, PLIC, PLIC, 0x400000, PTE_R | PTE_W);
+  proc_kvmmap(proc_kernel_pagetable, KERNBASE, KERNBASE, (uint64)etext - KERNBASE, PTE_R | PTE_X);
+  proc_kvmmap(proc_kernel_pagetable, (uint64)etext, (uint64)etext, PHYSTOP - (uint64)etext, PTE_R | PTE_W);
+  proc_kvmmap(proc_kernel_pagetable, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
+
+  return proc_kernel_pagetable;
+}
+
+// Created by Haotian Xu on 11/5/21.
+pagetable_t
+get_kernel_pagetable()
+{
+  return kernel_pagetable;
+}
+
+// Created by Haotian Xu on 11/5/21.
+// Recursively free page-table pages.
+// Keep the leaf physical memory pages.
+// see freewalk() for detail
+void
+proc_kernel_pagetable_freewalk(pagetable_t pagetable)
+{
+  for(int i = 0; i < 512; i++){
+    pte_t pte = pagetable[i];
+    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
+      uint64 child = PTE2PA(pte);
+      proc_kernel_pagetable_freewalk((pagetable_t)child);
+      pagetable[i] = 0;
+    } else if(pte & PTE_V){
+      pagetable[i] = 0;
+    }
+  }
+  kfree((void*)pagetable);
+}
+
+// Created by Haotian Xu on 11/7/21.
+static int _mappages_overwrite(pagetable_t, uint64, uint64, uint64, int);
+
+// Created by Haotian Xu on 11/5/21.
+// from start to end, first unmap,
+// and then copy process' user page table to process' kernel page table
+// see uvmcopy() for detail, except that no alignment needed
+int
+proc_uvm2kvm(pagetable_t u, pagetable_t k, uint64 start, uint64 end)
+{
+  // address cannot exceed kernel starting address
+  if (end > PLIC) return -1;
+
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  start = PGROUNDUP(start);
+
+  for(i = start; i < end; i += PGSIZE){
+    if((pte = walk(u, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+
+    pa = PTE2PA(*pte);
+    flags = (PTE_FLAGS(*pte) & ~PTE_U);
+
+    if(_mappages_overwrite(k, i, PGSIZE, pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+  err:
+  uvmunmap(k, start, (i-start) / PGSIZE, 0);
+  return -1;
+}
+
+// Created by Haotian Xu on 11/7/21.
+// see mappages() for detail except for the remap check
+static int
+_mappages_overwrite(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
+{
+  uint64 a, last;
+  pte_t *pte;
+
+  a = PGROUNDDOWN(va);
+  last = PGROUNDDOWN(va + size - 1);
+  for(;;){
+    if((pte = walk(pagetable, a, 1)) == 0)
+      return -1;
+    *pte = PA2PTE(pa) | perm | PTE_V;
+    if(a == last)
+      break;
+    a += PGSIZE;
+    pa += PGSIZE;
+  }
+  return 0;
+}
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..ca7bf83
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+13
\ No newline at end of file
