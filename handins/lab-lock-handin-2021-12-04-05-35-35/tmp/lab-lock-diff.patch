diff --git a/Makefile b/Makefile
index d8509b1..6518e1d 100644
--- a/Makefile
+++ b/Makefile
@@ -253,7 +253,9 @@ clean:
 	$U/initcode $U/initcode.out $K/kernel fs.img \
 	mkfs/mkfs .gdbinit \
         $U/usys.S \
-	$(UPROGS)
+	$(UPROGS) \
+	*/*[2-9]* \
+	.*[2-9] *[2-9]*
 
 # try to generate a unique GDB port
 GDBPORT = $(shell expr `id -u` % 5000 + 25000)
diff --git a/grade-lab-lock b/grade-lab-lock
index af6ec94..c39c21c 100755
--- a/grade-lab-lock
+++ b/grade-lab-lock
@@ -44,7 +44,7 @@ def test_bcachetest_test1():
 def test_usertests():
     r.run_qemu(shell_script([
         'usertests'
-    ]), timeout=300)
+    ]), timeout=3000)
     r.match('^ALL TESTS PASSED$')
 
 @test(1, "time")
diff --git a/kernel/bio.c b/kernel/bio.c
index 60d91a6..df3959b 100644
--- a/kernel/bio.c
+++ b/kernel/bio.c
@@ -23,32 +23,31 @@
 #include "fs.h"
 #include "buf.h"
 
+#define NBUCKET 13
+
 struct {
-  struct spinlock lock;
+  struct spinlock hashlock[NBUCKET];
   struct buf buf[NBUF];
 
   // Linked list of all buffers, through prev/next.
   // Sorted by how recently the buffer was used.
   // head.next is most recent, head.prev is least.
-  struct buf head;
+  struct buf hashtable[NBUCKET];
 } bcache;
 
 void
 binit(void)
 {
   struct buf *b;
+  char lockname[8];
 
-  initlock(&bcache.lock, "bcache");
+  for (int i = 0; i < NBUCKET; i++) {
+    snprintf(lockname, sizeof(lockname), "bcache%d", i);
+    initlock(&bcache.hashlock[i], lockname);
+  }
 
-  // Create linked list of buffers
-  bcache.head.prev = &bcache.head;
-  bcache.head.next = &bcache.head;
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-    b->next = bcache.head.next;
-    b->prev = &bcache.head;
     initsleeplock(&b->lock, "buffer");
-    bcache.head.next->prev = b;
-    bcache.head.next = b;
   }
 }
 
@@ -58,15 +57,15 @@ binit(void)
 static struct buf*
 bget(uint dev, uint blockno)
 {
-  struct buf *b;
-
-  acquire(&bcache.lock);
+  struct buf *b, *temp;
+  int hash = blockno % NBUCKET;
+  acquire(&bcache.hashlock[hash]);
 
   // Is the block already cached?
-  for(b = bcache.head.next; b != &bcache.head; b = b->next){
+  for (b = bcache.hashtable[hash].next; b != 0; b = b->next) {
     if(b->dev == dev && b->blockno == blockno){
       b->refcnt++;
-      release(&bcache.lock);
+      release(&bcache.hashlock[hash]);
       acquiresleep(&b->lock);
       return b;
     }
@@ -74,16 +73,30 @@ bget(uint dev, uint blockno)
 
   // Not cached.
   // Recycle the least recently used (LRU) unused buffer.
-  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-    if(b->refcnt == 0) {
+  int ihash;
+  for (ihash = 0; ihash < NBUCKET; ihash++) {
+    if (ihash != hash) acquire(&bcache.hashlock[ihash]);
+    for (temp = bcache.buf + ihash; temp < bcache.buf + NBUF; temp += NBUCKET) {
+      if (temp->refcnt == 0) {
+        b = temp;
+        break;
+      }
+    }
+    if (b) {
       b->dev = dev;
       b->blockno = blockno;
       b->valid = 0;
       b->refcnt = 1;
-      release(&bcache.lock);
+
+      // memo: add b to hashtable
+      b->next = bcache.hashtable[hash].next;
+      bcache.hashtable[hash].next = b;
+      if (ihash != hash) release(&bcache.hashlock[ihash]);
+      release(&bcache.hashlock[hash]);
       acquiresleep(&b->lock);
       return b;
     }
+    if (ihash != hash) release(&bcache.hashlock[ihash]);
   }
   panic("bget: no buffers");
 }
@@ -119,35 +132,41 @@ brelse(struct buf *b)
   if(!holdingsleep(&b->lock))
     panic("brelse");
 
+  int hash = b->blockno % NBUCKET;
+  struct buf *temp;
+
   releasesleep(&b->lock);
 
-  acquire(&bcache.lock);
+  acquire(&bcache.hashlock[hash]);
   b->refcnt--;
   if (b->refcnt == 0) {
     // no one is waiting for it.
-    b->next->prev = b->prev;
-    b->prev->next = b->next;
-    b->next = bcache.head.next;
-    b->prev = &bcache.head;
-    bcache.head.next->prev = b;
-    bcache.head.next = b;
+    for (temp = &bcache.hashtable[hash]; temp != 0; temp = temp->next) {
+      if (temp->next == b) {
+        temp->next = b->next;
+        b->next = 0;
+        break;
+      }
+    }
   }
-  
-  release(&bcache.lock);
+
+  release(&bcache.hashlock[hash]);
 }
 
 void
 bpin(struct buf *b) {
-  acquire(&bcache.lock);
+  int hash = b->blockno % NBUCKET;
+  acquire(&bcache.hashlock[hash]);
   b->refcnt++;
-  release(&bcache.lock);
+  release(&bcache.hashlock[hash]);
 }
 
 void
 bunpin(struct buf *b) {
-  acquire(&bcache.lock);
+  int hash = b->blockno % NBUCKET;
+  acquire(&bcache.hashlock[hash]);
   b->refcnt--;
-  release(&bcache.lock);
+  release(&bcache.hashlock[hash]);
 }
 
 
diff --git a/kernel/defs.h b/kernel/defs.h
index 21eeb39..98a5118 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,10 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+
+#define LAB_LOCK 1
+#define LAB_LOCK_1 1
+
 #ifdef LAB_NET
 struct mbuf;
 struct sock;
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..60fad22 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -18,15 +18,30 @@ struct run {
   struct run *next;
 };
 
+#ifdef LAB_LOCK_1
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} kmem[NCPU];
+#else
 struct {
   struct spinlock lock;
   struct run *freelist;
 } kmem;
+#endif
 
 void
 kinit()
 {
+#ifdef LAB_LOCK_1
+  char* kmem_name = "kmem0";
+  for(int i = 0; i < NCPU; i++){
+    snprintf(kmem_name, 4096, "kmem%d", i);
+    initlock(&kmem[i].lock, kmem_name);
+  }
+#else
   initlock(&kmem.lock, "kmem");
+#endif
   freerange(end, (void*)PHYSTOP);
 }
 
@@ -56,10 +71,21 @@ kfree(void *pa)
 
   r = (struct run*)pa;
 
+#ifdef LAB_LOCK_1
+  push_off();
+  int i = cpuid();
+  pop_off();
+
+  acquire(&kmem[i].lock);
+  r->next = kmem[i].freelist;
+  kmem[i].freelist = r;
+  release(&kmem[i].lock);
+#else
   acquire(&kmem.lock);
   r->next = kmem.freelist;
   kmem.freelist = r;
   release(&kmem.lock);
+#endif
 }
 
 // Allocate one 4096-byte page of physical memory.
@@ -70,11 +96,37 @@ kalloc(void)
 {
   struct run *r;
 
+#ifdef LAB_LOCK_1
+  push_off();
+  int i = cpuid();
+  pop_off();
+
+  acquire(&kmem[i].lock);
+  r = kmem[i].freelist;
+  if(r) {
+    kmem[i].freelist = r->next;
+    release(&kmem[i].lock);
+  } else{
+    release(&kmem[i].lock);
+    for(int j = 0; j < NCPU; j++) {
+      if(j == i) continue;
+      acquire(&kmem[j].lock);
+      r = kmem[j].freelist;
+      if(r) {
+        kmem[j].freelist = r->next;
+        release(&kmem[j].lock);
+        break;
+      }
+      release(&kmem[j].lock);
+    }
+  }
+#else
   acquire(&kmem.lock);
   r = kmem.freelist;
   if(r)
     kmem.freelist = r->next;
   release(&kmem.lock);
+#endif
 
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..9a03714
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+10
\ No newline at end of file
