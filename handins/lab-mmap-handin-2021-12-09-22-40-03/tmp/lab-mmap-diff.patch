diff --git a/Makefile b/Makefile
index d8509b1..c048098 100644
--- a/Makefile
+++ b/Makefile
@@ -175,6 +175,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_mmaptest\
 
 
 
@@ -253,7 +254,9 @@ clean:
 	$U/initcode $U/initcode.out $K/kernel fs.img \
 	mkfs/mkfs .gdbinit \
         $U/usys.S \
-	$(UPROGS)
+	$(UPROGS) \
+	*/*[2-9]* \
+	.*[2-9] *[2-9]*
 
 # try to generate a unique GDB port
 GDBPORT = $(shell expr `id -u` % 5000 + 25000)
diff --git a/kernel/defs.h b/kernel/defs.h
index 41098f4..884ce75 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -171,6 +171,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             mmapalloc(pagetable_t pagetable, uint64 va);
 
 // plic.c
 void            plicinit(void);
@@ -185,3 +186,5 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+#define LAB_MMAP 1
\ No newline at end of file
diff --git a/kernel/param.h b/kernel/param.h
index b5fdcb2..b2618e0 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -1,6 +1,7 @@
 #define NPROC        64  // maximum number of processes
 #define NCPU          8  // maximum number of CPUs
 #define NOFILE       16  // open files per process
+#define NVMA         16  // maximum number of VMAs
 #define NFILE       100  // open files per system
 #define NINODE       50  // maximum number of active i-nodes
 #define NDEV         10  // maximum major device number
diff --git a/kernel/proc.c b/kernel/proc.c
index ba1a9e3..a597532 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -6,6 +6,8 @@
 #include "proc.h"
 #include "defs.h"
 
+#include "fcntl.h"
+
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
@@ -296,6 +298,13 @@ fork(void)
       np->ofile[i] = filedup(p->ofile[i]);
   np->cwd = idup(p->cwd);
 
+  // increment reference counts on mmaped file descriptors.
+  for (i = 0; i < NVMA; i++)
+    if (p->vma[i]) {
+      np->vma[i] = p->vma[i];
+      filedup(p->vma[i]->file);
+    }
+
   safestrcpy(np->name, p->name, sizeof(p->name));
 
   pid = np->pid;
@@ -340,6 +349,7 @@ void
 exit(int status)
 {
   struct proc *p = myproc();
+  struct vma *v;
 
   if(p == initproc)
     panic("init exiting");
@@ -353,6 +363,17 @@ exit(int status)
     }
   }
 
+  // unmap all mapped files
+  for (int i = 0; i < NVMA; i++) {
+    if (p->vma[i] && p->vma[i]->alloc) {
+      v = p->vma[i];
+      if (v->flags & MAP_SHARED)
+        filewrite(v->file, (uint64) v->addr, v->length);
+      uvmunmap(p->pagetable, (uint64) v->addr, PGROUNDUP(v->length)/PGSIZE, 1);
+      fileclose(v->file);
+    }
+  }
+
   begin_op();
   iput(p->cwd);
   end_op();
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..25db473 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -103,4 +103,16 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  struct vma *vma[NVMA];
+};
+
+struct vma{
+  void *addr;
+  int length;
+  int prot;
+  int flags;
+  int fd;
+  int alloc;
+  struct file *file;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..7320633 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_mmap(void);
+extern uint64 sys_munmap(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,6 +129,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_mmap]    sys_mmap,
+[SYS_munmap]  sys_munmap,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..f522c17 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_mmap   22
+#define SYS_munmap 23
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..606dfa7 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -67,10 +67,13 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
+  } else if(r_scause() == 13) {
+    if (mmapalloc(p->pagetable, r_stval()) != 0)
+      p->killed = 1;
   } else {
-    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
-    printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
-    p->killed = 1;
+      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+      p->killed = 1;
   }
 
   if(p->killed)
diff --git a/kernel/vm.c b/kernel/vm.c
index b47f111..eed125d 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -6,6 +6,12 @@
 #include "defs.h"
 #include "fs.h"
 
+#include "spinlock.h"
+#include "proc.h"
+#include "sleeplock.h"
+#include "file.h"
+#include "fcntl.h"
+
 /*
  * the kernel's page table.
  */
@@ -15,6 +21,8 @@ extern char etext[];  // kernel.ld sets this to end of kernel code.
 
 extern char trampoline[]; // trampoline.S
 
+struct vma vma[NVMA];
+
 // Make a direct-map page table for the kernel.
 pagetable_t
 kvmmake(void)
@@ -172,7 +180,7 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
     if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
     if((*pte & PTE_V) == 0)
-      panic("uvmunmap: not mapped");
+      continue;
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
     if(do_free){
@@ -306,7 +314,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
+      continue;
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
@@ -429,3 +437,155 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+uint64
+sys_mmap(void)
+{
+  int length, prot, flags, fd, i;
+  struct file *file;
+  struct proc *p = myproc();
+  void *addr;
+  struct vma *v = 0;
+
+  // get arguments
+  if (argint(1, &length) < 0 || argint(2, &prot) < 0 ||
+  argint(3, &flags) < 0 || argint(4, &fd) < 0)
+    return -1;
+  file = p->ofile[fd];
+
+  if (!file->writable && (prot & PROT_WRITE) && (flags & MAP_SHARED))
+    return -1;
+
+  // find an unused region in the process's address space, and increase process's size
+  addr = (void*) PGROUNDUP(p->sz);
+  p->sz += PGROUNDUP(length);
+
+  // allocate a VMA and add it to the process
+  for (i = 0; i < NVMA; i++) {
+    if (vma[i].addr == 0) {
+      v = &vma[i];
+    }
+  }
+  if (v) {
+    v->addr = addr;
+    v->length = length;
+    v->prot = prot;
+    v->flags = flags;
+    v->fd = fd;
+    v->file = file;
+    v->alloc = 0;
+    for (i = 0; i < NVMA; i++) {
+      if (p->vma[i] == 0) {
+        p->vma[i] = v;
+        break;
+      }
+    }
+  } else return -1;
+
+  // increase the file's reference count
+  filedup(file);
+
+  return (uint64) addr;
+}
+
+uint64
+sys_munmap(void)
+{
+  uint64 addr;
+  int length;
+
+  struct proc *p = myproc();
+  struct vma *v = 0;
+  int i, n;
+
+  // get arguments
+  if (argaddr(0, &addr) < 0 || argint(1, &length) < 0)
+    return -1;
+
+  // find vma
+  for (i = 0; i < NVMA; i++) {
+    if (p->vma[i]) {
+      if (addr >= (uint64)p->vma[i]->addr && addr < ((uint64)p->vma[i]->addr + p->vma[i]->length)) {
+        v = p->vma[i];
+        break;
+      }
+    }
+  }
+  if (!v) return -1;
+
+  if (walkaddr(p->pagetable, addr) == 0)
+    return 0;
+
+  // page size round
+  n = (PGROUNDUP(addr + length) - PGROUNDDOWN(addr)) / PGSIZE;
+
+  // if SHARED write back
+  if (v->flags & MAP_SHARED)
+    filewrite(v->file, addr, length);
+
+  // unmap
+  uvmunmap(myproc()->pagetable, PGROUNDDOWN(addr), n, 1);
+  if (n >= PGROUNDUP(v->length) / PGSIZE) {
+    fileclose(v->file);
+    p->vma[i] = 0;
+  }
+
+  return 0;
+}
+
+int
+mmapalloc(pagetable_t pagetable, uint64 va)
+{
+  struct vma *v = 0;
+  struct proc *p = myproc();
+  struct inode *ip;
+  pte_t *pte;
+  char *mem;
+  uint flags = PTE_U | PTE_V;
+  int i, n, realsz;
+
+  if (va >= p->sz) return -1;
+
+  // find vma
+  for (i = 0; i < NVMA; i++) {
+    if (p->vma[i]) {
+      if (va >= (uint64)p->vma[i]->addr && va < ((uint64)p->vma[i]->addr + p->vma[i]->length)) {
+        v = p->vma[i];
+        break;
+      }
+    }
+  }
+  if (!v) return -1;
+  ip = v->file->ip;
+
+  // alloc physical memory and read from file
+  if ((realsz = p->sz) > ip->size)
+    realsz = ip->size;
+  va = PGROUNDDOWN(va);
+  if ((n = (uint64) v->addr + realsz - va) > PGSIZE)
+    n = PGSIZE;
+  else if (n < 0)
+    n = 0;
+  mem = kalloc();
+  if (mem == 0) return -1;
+  ilock(ip);
+  if (n > 0)
+    if (readi(ip, 0, (uint64) mem, va - (uint64) v->addr, n) != n) {
+      iunlock(ip);
+      return -1;
+    }
+  if (n < PGSIZE)
+    memset(mem + n, 0, PGSIZE - n);
+  iunlock(ip);
+
+  // alloc pte
+  if ((pte = walk(pagetable, va, 1)) == 0) return -1;
+  if (v->prot & PROT_EXEC) flags |= PTE_X;
+  if (v->prot & PROT_READ) flags |= PTE_R;
+  if (v->prot & PROT_WRITE) flags |= PTE_W;
+  *pte = PA2PTE((uint64)mem) | flags;
+
+  v->alloc = 1;
+
+  return 0;
+}
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..301160a
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+8
\ No newline at end of file
diff --git a/user/mmaptest.c b/user/mmaptest.c
index 0819622..2fe1692 100644
--- a/user/mmaptest.c
+++ b/user/mmaptest.c
@@ -5,6 +5,7 @@
 #include "kernel/riscv.h"
 #include "kernel/fs.h"
 #include "user/user.h"
+#include "user.h"
 
 void mmap_test();
 void fork_test();
diff --git a/user/user.h b/user/user.h
index b71ecda..711cfc8 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+void* mmap(void *addr, int length, int prot, int flags, int fd, int offset);
+int munmap(void *addr, int length);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d23b9cc 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("mmap");
+entry("munmap");
