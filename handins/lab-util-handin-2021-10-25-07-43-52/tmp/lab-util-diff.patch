diff --git a/.gdbinit 2 b/.gdbinit 2
new file mode 100644
index 0000000..16c68b8
--- /dev/null
+++ b/.gdbinit 2	
@@ -0,0 +1,5 @@
+set confirm off
+set architecture riscv:rv64
+target remote 127.0.0.1:25501
+symbol-file kernel/kernel
+set disassemble-next-line auto
diff --git a/.gdbinit 3 b/.gdbinit 3
new file mode 100644
index 0000000..16c68b8
--- /dev/null
+++ b/.gdbinit 3	
@@ -0,0 +1,5 @@
+set confirm off
+set architecture riscv:rv64
+target remote 127.0.0.1:25501
+symbol-file kernel/kernel
+set disassemble-next-line auto
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
index 0000000..13566b8
--- /dev/null
+++ b/.idea/.gitignore
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
index 0000000..1d3608d
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CidrRootsConfiguration">
+    <sourceRoots>
+      <file path="$PROJECT_DIR$/kernel" />
+      <file path="$PROJECT_DIR$/user" />
+    </sourceRoots>
+  </component>
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MakefileSettings">
+    <option name="linkedExternalProjectsSettings">
+      <MakefileProjectSettings>
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+          </set>
+        </option>
+        <option name="version" value="2" />
+      </MakefileProjectSettings>
+    </option>
+  </component>
+  <component name="MakefileWorkspace" PROJECT_DIR="$PROJECT_DIR$" />
+</project>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
index 0000000..94a25f7
--- /dev/null
+++ b/.idea/vcs.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 0fbaf7c..f3e461c 100644
--- a/Makefile
+++ b/Makefile
@@ -149,6 +149,11 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_sleep\
+	$U/_pingpong\
+	$U/_primes\
+	$U/_find\
+	$U/_xargs\
 
 
 ifeq ($(LAB),syscall)
diff --git a/kernel/kernel 2 b/kernel/kernel 2
new file mode 100755
index 0000000..27e0e98
Binary files /dev/null and b/kernel/kernel 2 differ
diff --git a/kernel/kernel 3 b/kernel/kernel 3
new file mode 100755
index 0000000..27e0e98
Binary files /dev/null and b/kernel/kernel 3 differ
diff --git a/kernel/kernel 4 b/kernel/kernel 4
new file mode 100755
index 0000000..27e0e98
Binary files /dev/null and b/kernel/kernel 4 differ
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..9a03714
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+10
\ No newline at end of file
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..89854c9
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,81 @@
+//
+// Created by Haotian Xu on 10/25/21.
+//
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "user.h"
+
+void _find(char *path, char *fileName);
+char* pathFileName(char *path);
+
+int
+main(int argc, char *argv[])
+{
+    // must have 3 arguments
+    if (argc != 3) {
+        printf("find error\n");
+        exit(1);
+    }
+    // recursion function
+    _find(argv[1], argv[2]);
+    exit(0);
+}
+
+void
+_find(char *path, char *fileName)
+{
+    char buf[512], *p;
+    int fd;
+    struct dirent de;
+    struct stat st;
+    // fd: file descriptor
+    if ((fd = open(path, 0)) < 0) {
+        fprintf(2, "ls: cannot open %s\n", path);
+        return;
+    }
+    // st: statistics struct
+    if (fstat(fd, &st) < 0) {
+        fprintf(2, "ls: cannot stat %s\n", path);
+        close(fd);
+        return;
+    }
+
+    switch (st.type) {
+        case T_FILE:
+            if (strcmp(pathFileName(path), fileName) == 0) printf("%s\n", path);
+            break;
+        case T_DIR:
+            if (strlen(path) + 1 + DIRSIZ + 1 > sizeof buf) {
+                printf("ls: path too long\n");
+                break;
+            }
+            // buf: full path
+            strcpy(buf, path);
+            p = buf + strlen(buf);
+            *p++ = '/';
+            // traverse (every size of de struct)
+            while (read(fd, &de, sizeof(de)) == sizeof(de)) {
+                if(de.inum == 0 || strcmp(de.name, "..") == 0 || strcmp(de.name, ".") == 0) continue;
+                // buf: full path with sub dir
+                memmove(p, de.name, DIRSIZ);
+                p[DIRSIZ] = 0;
+                // recursion
+                _find(buf, fileName);
+            }
+            break;
+    }
+    close(fd);
+    return;
+}
+
+char*
+pathFileName(char *path)
+{
+    char *p;
+    // find first character after last slash.
+    for(p=path+strlen(path); p >= path && *p != '/'; p--) ;
+    p++;
+    return p;
+}
diff --git a/user/initcode 2 b/user/initcode 2
new file mode 100755
index 0000000..97154b2
Binary files /dev/null and b/user/initcode 2 differ
diff --git a/user/initcode 2.out b/user/initcode 2.out
new file mode 100755
index 0000000..c08ca65
Binary files /dev/null and b/user/initcode 2.out differ
diff --git a/user/initcode 3 b/user/initcode 3
new file mode 100755
index 0000000..97154b2
Binary files /dev/null and b/user/initcode 3 differ
diff --git a/user/initcode 3.out b/user/initcode 3.out
new file mode 100755
index 0000000..c08ca65
Binary files /dev/null and b/user/initcode 3.out differ
diff --git a/user/initcode 4 b/user/initcode 4
new file mode 100755
index 0000000..97154b2
Binary files /dev/null and b/user/initcode 4 differ
diff --git a/user/initcode 4.out b/user/initcode 4.out
new file mode 100755
index 0000000..c08ca65
Binary files /dev/null and b/user/initcode 4.out differ
diff --git a/user/ls.c b/user/ls.c
index b54d951..cf55381 100644
--- a/user/ls.c
+++ b/user/ls.c
@@ -2,6 +2,7 @@
 #include "kernel/stat.h"
 #include "user/user.h"
 #include "kernel/fs.h"
+#include "user.h"
 
 char*
 fmtname(char *path)
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..06bf170
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,32 @@
+//
+// Created by Haotian Xu on 10/23/21.
+//
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+    int p[2];
+    pipe(p);
+    char i;
+
+    if (fork() == 0) {
+        read(p[0], &i, 1);
+        close(p[0]);
+        printf("%d: received ping\n", getpid());
+        write(p[1], &i, 1);
+        close(p[1]);
+    } else {
+        write(p[1], "a", 1);
+        close(p[1]);
+
+        wait(0);
+        read(p[0], &i, 1);
+        close(p[0]);
+        printf("%d: received pong\n", getpid());
+    }
+    exit(0);
+}
diff --git a/user/primes.c b/user/primes.c
new file mode 100644
index 0000000..8c7362b
--- /dev/null
+++ b/user/primes.c
@@ -0,0 +1,62 @@
+//
+// Created by Haotian Xu on 10/25/21.
+//
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user.h"
+
+const int INT_BYTE = 4;
+void _primes(int p[2]);
+
+int
+main(int argc, char *argv[])
+{
+    int p[2];
+    int i;
+
+    pipe(p);
+
+    if (fork() == 0) {
+        _primes(p);
+    } else {
+        close(p[0]);
+        for (i=2; i<=35; i++){
+            write(p[1], &i, INT_BYTE);
+        }
+        close(p[1]);
+        wait(0);
+    }
+    exit(0);
+}
+
+void
+_primes(int p[2])
+{
+    int sub_p[2];
+    int num;
+    int prime;
+
+    close(p[1]);
+    if (read(p[0], &prime, INT_BYTE) == 0) {
+        close(p[0]);
+        exit(0);
+    }
+    else{
+        pipe(sub_p);
+        printf("prime %d\n", prime);
+        if (fork() == 0){
+            close(p[0]);
+            _primes(sub_p);
+        } else {
+            close(sub_p[0]);
+            while (read(p[0], &num, INT_BYTE) != 0) {
+                if (num % prime != 0) write(sub_p[1], &num, INT_BYTE);
+            }
+            close(sub_p[1]);
+            close(p[0]);
+            wait(0);
+        }
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..de6abd1
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,18 @@
+//
+// Created by Haotian Xu on 10/23/21.
+//
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+    if (argc < 2) {
+        printf("sleep error\n");
+        exit(1);
+    }
+    sleep(atoi(argv[1]));
+    exit(0);
+}
diff --git a/user/usys 2.S b/user/usys 2.S
new file mode 100644
index 0000000..e761942
--- /dev/null
+++ b/user/usys 2.S	
@@ -0,0 +1,107 @@
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ ecall
+ ret
+.global exit
+exit:
+ li a7, SYS_exit
+ ecall
+ ret
+.global wait
+wait:
+ li a7, SYS_wait
+ ecall
+ ret
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ ecall
+ ret
+.global read
+read:
+ li a7, SYS_read
+ ecall
+ ret
+.global write
+write:
+ li a7, SYS_write
+ ecall
+ ret
+.global close
+close:
+ li a7, SYS_close
+ ecall
+ ret
+.global kill
+kill:
+ li a7, SYS_kill
+ ecall
+ ret
+.global exec
+exec:
+ li a7, SYS_exec
+ ecall
+ ret
+.global open
+open:
+ li a7, SYS_open
+ ecall
+ ret
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ ecall
+ ret
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ ecall
+ ret
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ ecall
+ ret
+.global link
+link:
+ li a7, SYS_link
+ ecall
+ ret
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ ecall
+ ret
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ ecall
+ ret
+.global dup
+dup:
+ li a7, SYS_dup
+ ecall
+ ret
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ ecall
+ ret
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ ecall
+ ret
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ ecall
+ ret
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ ecall
+ ret
diff --git a/user/usys 3.S b/user/usys 3.S
new file mode 100644
index 0000000..e761942
--- /dev/null
+++ b/user/usys 3.S	
@@ -0,0 +1,107 @@
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ ecall
+ ret
+.global exit
+exit:
+ li a7, SYS_exit
+ ecall
+ ret
+.global wait
+wait:
+ li a7, SYS_wait
+ ecall
+ ret
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ ecall
+ ret
+.global read
+read:
+ li a7, SYS_read
+ ecall
+ ret
+.global write
+write:
+ li a7, SYS_write
+ ecall
+ ret
+.global close
+close:
+ li a7, SYS_close
+ ecall
+ ret
+.global kill
+kill:
+ li a7, SYS_kill
+ ecall
+ ret
+.global exec
+exec:
+ li a7, SYS_exec
+ ecall
+ ret
+.global open
+open:
+ li a7, SYS_open
+ ecall
+ ret
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ ecall
+ ret
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ ecall
+ ret
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ ecall
+ ret
+.global link
+link:
+ li a7, SYS_link
+ ecall
+ ret
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ ecall
+ ret
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ ecall
+ ret
+.global dup
+dup:
+ li a7, SYS_dup
+ ecall
+ ret
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ ecall
+ ret
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ ecall
+ ret
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ ecall
+ ret
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ ecall
+ ret
diff --git a/user/usys 4.S b/user/usys 4.S
new file mode 100644
index 0000000..e761942
--- /dev/null
+++ b/user/usys 4.S	
@@ -0,0 +1,107 @@
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ ecall
+ ret
+.global exit
+exit:
+ li a7, SYS_exit
+ ecall
+ ret
+.global wait
+wait:
+ li a7, SYS_wait
+ ecall
+ ret
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ ecall
+ ret
+.global read
+read:
+ li a7, SYS_read
+ ecall
+ ret
+.global write
+write:
+ li a7, SYS_write
+ ecall
+ ret
+.global close
+close:
+ li a7, SYS_close
+ ecall
+ ret
+.global kill
+kill:
+ li a7, SYS_kill
+ ecall
+ ret
+.global exec
+exec:
+ li a7, SYS_exec
+ ecall
+ ret
+.global open
+open:
+ li a7, SYS_open
+ ecall
+ ret
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ ecall
+ ret
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ ecall
+ ret
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ ecall
+ ret
+.global link
+link:
+ li a7, SYS_link
+ ecall
+ ret
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ ecall
+ ret
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ ecall
+ ret
+.global dup
+dup:
+ li a7, SYS_dup
+ ecall
+ ret
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ ecall
+ ret
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ ecall
+ ret
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ ecall
+ ret
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ ecall
+ ret
diff --git a/user/usys 5.S b/user/usys 5.S
new file mode 100644
index 0000000..e761942
--- /dev/null
+++ b/user/usys 5.S	
@@ -0,0 +1,107 @@
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ ecall
+ ret
+.global exit
+exit:
+ li a7, SYS_exit
+ ecall
+ ret
+.global wait
+wait:
+ li a7, SYS_wait
+ ecall
+ ret
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ ecall
+ ret
+.global read
+read:
+ li a7, SYS_read
+ ecall
+ ret
+.global write
+write:
+ li a7, SYS_write
+ ecall
+ ret
+.global close
+close:
+ li a7, SYS_close
+ ecall
+ ret
+.global kill
+kill:
+ li a7, SYS_kill
+ ecall
+ ret
+.global exec
+exec:
+ li a7, SYS_exec
+ ecall
+ ret
+.global open
+open:
+ li a7, SYS_open
+ ecall
+ ret
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ ecall
+ ret
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ ecall
+ ret
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ ecall
+ ret
+.global link
+link:
+ li a7, SYS_link
+ ecall
+ ret
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ ecall
+ ret
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ ecall
+ ret
+.global dup
+dup:
+ li a7, SYS_dup
+ ecall
+ ret
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ ecall
+ ret
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ ecall
+ ret
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ ecall
+ ret
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ ecall
+ ret
diff --git a/user/xargs.c b/user/xargs.c
new file mode 100644
index 0000000..1089d8b
--- /dev/null
+++ b/user/xargs.c
@@ -0,0 +1,33 @@
+//
+// Created by Haotian Xu on 10/25/21.
+//
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+    char argExtra[512];
+    char* argvExec[argc];
+    int i;
+
+    for (i=1; i<argc; i++) argvExec[i-1] = argv[i];
+
+    while (1) {
+        for (i=0;; i++) if (read(0, &argExtra[i], 1) == 0 || argExtra[i] == '\n') break;
+        if (i == 0) break;
+        argExtra[i] = 0;
+
+        argvExec[argc-1] = argExtra;
+
+        if (fork() == 0) {
+            exec(argvExec[0], argvExec);
+            exit(0);
+        } else {
+            wait(0);
+        }
+    }
+    exit(0);
+}
\ No newline at end of file
