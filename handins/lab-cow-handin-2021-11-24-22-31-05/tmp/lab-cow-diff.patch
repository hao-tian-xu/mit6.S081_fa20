diff --git a/Makefile b/Makefile
index 1fa367e..786e848 100644
--- a/Makefile
+++ b/Makefile
@@ -252,7 +252,9 @@ clean:
 	$U/initcode $U/initcode.out $K/kernel fs.img \
 	mkfs/mkfs .gdbinit \
         $U/usys.S \
-	$(UPROGS)
+	$(UPROGS) \
+	*/*[2-9]* \
+	.*[2-9] *[2-9]*
 
 # try to generate a unique GDB port
 GDBPORT = $(shell expr `id -u` % 5000 + 25000)
diff --git a/kernel/defs.h b/kernel/defs.h
index 4b9bbc0..f7c9c84 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -60,6 +60,7 @@ void            ramdiskintr(void);
 void            ramdiskrw(struct buf*);
 
 // kalloc.c
+void            refcount_increase(uint64);  // Added by Haotian
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
@@ -171,6 +172,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             cowalloc(pagetable_t, uint64);         // Added by Haotian
 
 // plic.c
 void            plicinit(void);
@@ -185,3 +187,6 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+// Added by Haotian
+#define LAB_COW 1
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..9f3159d 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -19,13 +19,30 @@ struct run {
 };
 
 struct {
-  struct spinlock lock;
+  struct spinlock lock;   // memo: a single lock for physical memory allocation and free
   struct run *freelist;
 } kmem;
 
+#ifdef LAB_COW
+int refcount[(PHYSTOP - KERNBASE) / PGSIZE];
+#define refcount_init(pa) (refcount[((uint64)pa - KERNBASE) / PGSIZE] = 1)
+#define refcount_decrease(pa) (refcount[((uint64)pa - KERNBASE) / PGSIZE]--)
+#define refcount_get(pa) (refcount[((uint64)pa - KERNBASE) / PGSIZE])
+
+void
+refcount_increase(uint64 pa)
+{
+  refcount[(pa - KERNBASE) / PGSIZE]++;
+}
+#endif
+
 void
 kinit()
 {
+#ifdef LAB_COW
+  for (int i = 0; i < ((PHYSTOP - KERNBASE) / PGSIZE); i++)
+    refcount[i] = 0;
+#endif
   initlock(&kmem.lock, "kmem");
   freerange(end, (void*)PHYSTOP);
 }
@@ -51,6 +68,12 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
+#ifdef LAB_COW
+  refcount_decrease(pa);
+  if (refcount_get(pa) > 0)
+    return;
+#endif
+
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
 
@@ -78,5 +101,11 @@ kalloc(void)
 
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
+
+#ifdef LAB_COW
+  if(r)
+    refcount_init(r);
+#endif
+
   return (void*)r;
 }
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 0aec003..72a8988 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -332,6 +332,8 @@ sfence_vma()
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
 
+#define PTE_COW (1L << 8) // Haotian: copy-on-write
+
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
 
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..55fd377 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -67,10 +67,20 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
-    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
-    printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
-    p->killed = 1;
+  }
+#ifdef LAB_COW
+  else if(r_scause() == 13 || r_scause() == 15) {
+    // not in stack guard page
+    if (r_stval() <= PGROUNDDOWN(p->trapframe->sp) && r_stval() >= PGROUNDDOWN(p->trapframe->sp) - PGSIZE)
+      p->killed = 1;
+    else if(cowalloc(p->pagetable, r_stval()) < 0)
+      p->killed = 1;
+  }
+#endif
+  else {
+      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+      p->killed = 1;
   }
 
   if(p->killed)
@@ -217,4 +227,3 @@ devintr()
     return 0;
   }
 }
-
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..b799ec9 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
+#include "proc.h"
 
 /*
  * the kernel's page table.
@@ -311,7 +313,9 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
+#ifndef LAB_COW
   char *mem;
+#endif
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
@@ -319,6 +323,8 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
+    // Modified by Haotian on 11/24/21.
+#ifndef LAB_COW
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto err;
@@ -327,6 +333,14 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       kfree(mem);
       goto err;
     }
+#else
+    if (*pte & PTE_W)
+      *pte = (*pte & ~PTE_W) | PTE_COW;
+    flags = PTE_FLAGS(*pte);
+    refcount_increase(pa);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0)
+      goto err;
+#endif
   }
   return 0;
 
@@ -358,6 +372,10 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
+#ifdef LAB_COW
+    if(cowalloc(pagetable, va0) < 0)
+      return -1;
+#endif
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
@@ -440,3 +458,31 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+#ifdef LAB_COW
+int
+cowalloc(pagetable_t pagetable, uint64 va)
+{
+  uint64 pa;
+  pte_t *pte;
+  uint flags;
+
+  if(va > MAXVA) return -1;
+
+  va = PGROUNDDOWN(va);
+  if((pte = walk(pagetable, va, 0)) == 0) return -1;
+  if((pa = PTE2PA(*pte)) == 0) return -1;
+
+  flags = PTE_FLAGS(*pte);
+
+  if (flags & PTE_COW) {
+    char *mem = kalloc();
+    if (mem == 0) return -1;
+    memmove(mem, (char*)pa, PGSIZE);
+    kfree((void*)pa);
+    flags = (flags & ~PTE_COW) | PTE_W;
+    *pte = PA2PTE((uint64)mem) | flags;
+  }
+  return 0;
+}
+#endif
